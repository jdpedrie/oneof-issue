<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: demonstration.proto

namespace Oneoferror;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>oneoferror.Demonstration</code>
 */
class Demonstration extends \Google\Protobuf\Internal\Message
{
    protected $test_argument;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *     @type \Oneoferror\Demonstration\SubMessage $sub_message
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Demonstration::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string name = 4;</code>
     * @return string
     */
    public function getName()
    {
        return $this->readOneof(4);
    }

    /**
     * Generated from protobuf field <code>string name = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.oneoferror.Demonstration.SubMessage sub_message = 9;</code>
     * @return \Oneoferror\Demonstration\SubMessage
     */
    public function getSubMessage()
    {
        return $this->readOneof(9);
    }

    /**
     * Generated from protobuf field <code>.oneoferror.Demonstration.SubMessage sub_message = 9;</code>
     * @param \Oneoferror\Demonstration\SubMessage $var
     * @return $this
     */
    public function setSubMessage($var)
    {
        GPBUtil::checkMessage($var, \Oneoferror\Demonstration_SubMessage::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getTestArgument()
    {
        return $this->whichOneof("test_argument");
    }

}

